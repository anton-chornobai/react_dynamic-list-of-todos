{"version":3,"sources":["types/FilterTypes.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","TodoList","todos","selectedTodo","setSelectedTodo","className","map","todo","id","completed","title","type","onClick","setTodoHandler","TodoFilter","setFilterType","filterType","query","setQuery","defaultValue","onChange","e","target","value","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onCloseHandler","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","usr","catch","err","Error","finally","href","email","name","App","setTodos","error","message","filteredTodos","useMemo","result","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3cb1f45.chunk.js","sourcesContent":["export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  setSelectedTodo: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo = () => {},\n}) => {\n  const setTodoHandler = (todo: Todo): void => {\n    setSelectedTodo(todo);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed ? (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              ) : null}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={\n                  todo.completed ? 'has-text-success' : 'has-text-danger'\n                }\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setTodoHandler(todo)}\n              >\n                <span className=\"icon\">\n                  {selectedTodo?.id === todo.id\n                    ? (\n                      <i className=\"far fa-eye-slash\" />\n                    ) : (\n                      <i className=\"far fa-eye\" />\n                    )}\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { FilterType } from '../../types/FilterTypes';\n\ntype Props = {\n  filterType: string;\n  setFilterType: (filterType: string) => void;\n  query: string;\n  setQuery: (query: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  setFilterType,\n  filterType,\n  query,\n  setQuery,\n}) => {\n  const onFilterOptionChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setFilterType(e.target.value);\n  };\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n  };\n\n  const clearInput = () => {\n    setQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            defaultValue={filterType}\n            onChange={onFilterOptionChange}\n          >\n            <option value={FilterType.ALL}>All</option>\n            <option value={FilterType.ACTIVE}>Active</option>\n            <option value={FilterType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={onChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={clearInput}\n                aria-label=\"Clear Search\"\n              />\n            </span>\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo;\n  onCloseHandler: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onCloseHandler,\n}) => {\n  const [user, setUser] = useState<User | undefined>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then((usr) => setUser(usr))\n      .catch((err) => {\n        throw new Error(err);\n      })\n      .finally(() => setIsLoading(false));\n  }, [selectedTodo.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onCloseHandler}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\nimport { FilterType } from './types/FilterTypes';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filterType, setFilterType] = useState<string>(FilterType.ALL);\n  const [query, setQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    getTodos()\n      .then((res) => setTodos(res))\n      .catch((error) => {\n        throw new Error(error.message);\n      });\n  }, []);\n\n  const closeSelectedTodoInfo = () => {\n    setSelectedTodo(null);\n  };\n\n  const filteredTodos = useMemo(() => {\n    let result = todos;\n\n    switch (filterType) {\n      case FilterType.ACTIVE:\n        result = todos.filter((todo) => {\n          return !todo.completed;\n        });\n        break;\n\n      case FilterType.COMPLETED:\n        result = todos.filter((todo) => {\n          return todo.completed;\n        });\n        break;\n\n      default:\n        result = todos;\n    }\n\n    return [...result].filter(\n      (todo) => todo.title.toLowerCase().includes(query.toLowerCase()),\n    );\n  }, [todos, filterType, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                filterType={filterType}\n                setFilterType={setFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0 ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodo={selectedTodo}\n                  setSelectedTodo={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onCloseHandler={closeSelectedTodoInfo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}